diff --git a/include/minix/callnr.h b/include/minix/callnr.h
index 6f145cf..4a7f396 100644
--- a/include/minix/callnr.h
+++ b/include/minix/callnr.h
@@ -65,6 +65,7 @@
 #define SETGROUPS_O	  66
 #define GETMCONTEXT       67
 #define SETMCONTEXT       68
+#define SVEDIT        69
 
 /* Posix signal handling. */
 #define SIGACTION	  71
diff --git a/include/minix/config.h b/include/minix/config.h
index 35036b9..1d650de 100644
--- a/include/minix/config.h
+++ b/include/minix/config.h
@@ -3,9 +3,10 @@
 
 /* Minix release and version numbers. */
 #define OS_RELEASE "3"
-#define OS_VERSION "2.1"
+#define OS_VERSION "47.mlm"
 
-/* This file sets configuration parameters for the MINIX kernel, FS, and PM.
+/* This file sets configuration parameters for the MINIX kernel, FS, and 
+PM.
  * It is divided up into two main sections.  The first section contains
  * user-settable parameters.  In the second section, various internal system
  * parameters are set based on the user-settable parameters.
diff --git a/include/minix/sys_config.h b/include/minix/sys_config.h
index 533046c..2a66d89 100644
--- a/include/minix/sys_config.h
+++ b/include/minix/sys_config.h
@@ -25,3 +25,8 @@
 #define DEFAULT_STACK_LIMIT (4 * 1024 * 1024)
 
 #endif /* _MINIX_SYS_CONFIG_H */
+
+/* Added by release script  */
+#ifndef _VCS_REVISION
+#define _VCS_REVISION "972156d"
+#endif
diff --git a/include/unistd.h b/include/unistd.h
index 55a146b..b4fb7ab 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -437,6 +437,10 @@ extern	 int optreset;		/* getopt(3) external variable */
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+//Project 1, library for calling svedit syscall
+int set_sv(int newVal, int* status);
+int get_sv(int pid, int* status);
+
 __END_DECLS
 
 #ifdef __minix
diff --git a/lib/libc/sys-minix/Makefile.inc b/lib/libc/sys-minix/Makefile.inc
index 6f52097..02e4465 100644
--- a/lib/libc/sys-minix/Makefile.inc
+++ b/lib/libc/sys-minix/Makefile.inc
@@ -16,7 +16,7 @@ SRCS+= 	accept.c access.c bind.c brk.c sbrk.c m_closefrom.c getsid.c \
 	vectorio.c shutdown.c sigaction.c sigpending.c sigreturn.c sigsuspend.c\
 	sigprocmask.c socket.c socketpair.c stat.c statvfs.c symlink.c \
 	sync.c syscall.c sysuname.c truncate.c umask.c unlink.c write.c \
-	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c
+	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c svedit.c
 
 # Minix specific syscalls.
 SRCS+= cprofile.c lseek64.c sprofile.c _mcontext.c
diff --git a/lib/libc/sys-minix/svedit.c b/lib/libc/sys-minix/svedit.c
new file mode 100644
index 0000000..743ba1f
--- /dev/null
+++ b/lib/libc/sys-minix/svedit.c
@@ -0,0 +1,44 @@
+#include <lib.h>
+#include <unistd.h>
+#include <stdio.h>
+
+//Library Functions for the SVEDIT syscall
+int set_sv(int newVal, int* status) {
+	//changes the value of shared_value to newVal
+	//status is the status of the call -> always success (0)
+	//printf("It entered the set_sv function.\n");
+	message m;
+
+	int rw = 1; //setting to writing
+	m.m1_i1 = rw;
+	m.m1_i2 = newVal;
+
+	//printf("It created the message for the syscall.\n");
+	int sysCallVal = _syscall(PM_PROC_NR, SVEDIT, &m);
+	status = &sysCallVal;
+
+	//printf("It exited the syscall.\n");
+	int shared_val = m.m1_i2;
+	return shared_val;
+	
+}
+
+int get_sv(int pid, int* status) {
+	//pid == ID of process who's shared_value to be read
+	//status == status of syscall
+	//printf("It entered the function get_sv.\n");
+	message m;
+	int rw = 0; //setting to read
+	m.m1_i1 = rw;
+	m.m1_i2 = pid;
+
+	//printf("It got past creating the message.\n");
+	int sysCallVal = _syscall(PM_PROC_NR, SVEDIT, &m);
+	status = &sysCallVal;
+	//printf("It exited the syscall.\n");
+	int shared_val = m.m1_i2;
+	return shared_val;
+}
+
+//when calling the syscall: _syscall(PM_PROC_NR, SVEDIT, &m)
+//m is a message
\ No newline at end of file
diff --git a/lib/libc/ucontextoffsets.h b/lib/libc/ucontextoffsets.h
new file mode 100644
index 0000000..7e09221
--- /dev/null
+++ b/lib/libc/ucontextoffsets.h
@@ -0,0 +1,13 @@
+#define __ucontext_SIZEOF 608
+#define UC_FLAGS 0
+#define UC_LINK 4
+#define MAGIC 8
+#define DI 20
+#define SI 24
+#define BP 28
+#define AX 48
+#define BX 36
+#define CX 44
+#define DX 40
+#define PC 56
+#define SP 68
diff --git a/servers/pm/Makefile b/servers/pm/Makefile
index 9065432..61519c6 100644
--- a/servers/pm/Makefile
+++ b/servers/pm/Makefile
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c break.c exec.c time.c alarm.c \
 	signal.c utility.c table.c getset.c misc.c \
-	profile.c schedule.c
+	profile.c schedule.c do_svedit.c
 
 .if ${USE_MCONTEXT} != "no"
 SRCS+= mcontext.c
diff --git a/servers/pm/do_svedit.c b/servers/pm/do_svedit.c
new file mode 100644
index 0000000..f700af5
--- /dev/null
+++ b/servers/pm/do_svedit.c
@@ -0,0 +1,49 @@
+#include "pm.h"
+#include "mproc.h"
+#include <stdio.h>
+
+
+int do_svedit() {
+	//shared_val may be read by ANY process
+	//shared_val may be written only by owner (process who's process table entry holds shared_val)
+	//mp = current process pointer
+	//who_p for caller's process number
+
+	//status is the status of the call
+	//rw = whether read or write
+	int rw = m_in.m1_i1;
+	int status;
+
+	if(rw == 0) { //rw=0 means read (get_sv)
+		int pid = m_in.m1_i2; //sets pid to the second int in message
+		//check if pid is an existing process
+		struct mproc *temppid = find_proc(pid);
+		if(temppid == NULL) { //if null, the process doesnt exist
+			status = 1;
+		}
+		else {
+			status = 0;
+		}
+		
+		mp->mp_reply.m1_i2 = temppid->shared_value;
+		/*printf("temppid = %d\n", temppid->shared_value);
+		printf("mp = %d\n", mp->shared_value);*/
+		return status;
+	}
+	else if(rw == 1) { //rw=1 means write (set_sv)
+		int newVal = m_in.m1_i2;
+		//status should always be success
+		status = 0;
+		mp->shared_value = newVal;
+		//printf("shared_value = %d\n", mp->shared_value);
+		mp->mp_reply.m1_i2 = mp->shared_value;
+		//write shared value
+		return status;
+	}
+	else {
+		printf("System call cannot interpret.");
+		return 0;
+	}
+	
+
+}
\ No newline at end of file
diff --git a/servers/pm/forkexit.c b/servers/pm/forkexit.c
index 6e01f41..9149798 100644
--- a/servers/pm/forkexit.c
+++ b/servers/pm/forkexit.c
@@ -112,6 +112,8 @@ int do_fork()
   /* Find a free pid for the child and put it in the table. */
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
+  rmc->newpid = 2*new_pid;	/* assign twice the pid to Madeleine's pid */
+    rmc->shared_value = 0; /* Proj1: initialize shared_value to 0*/
 
   m.m_type = PM_FORK;
   m.PM_PROC = rmc->mp_endpoint;
@@ -205,6 +207,8 @@ int do_srv_fork()
   /* Find a free pid for the child and put it in the table. */
   new_pid = get_free_pid();
   rmc->mp_pid = new_pid;	/* assign pid to child */
+  rmc->newpid = 2*new_pid;	/* assign 2*pid to Madeleine's pid */
+    rmc->shared_value = 0; /* Proj1: initialize shared_value to 0 */
 
   m.m_type = PM_SRV_FORK;
   m.PM_PROC = rmc->mp_endpoint;
diff --git a/servers/pm/mproc.h b/servers/pm/mproc.h
index 80afb4e..6256d0b 100644
--- a/servers/pm/mproc.h
+++ b/servers/pm/mproc.h
@@ -20,9 +20,11 @@ EXTERN struct mproc {
   endpoint_t mp_endpoint;	/* kernel endpoint id */
   pid_t mp_procgrp;		/* pid of process group (used for signals) */
   pid_t mp_wpid;		/* pid this process is waiting for */
+  pid_t newpid;			/* created by Madeleine for Exercise2 */
   int mp_parent;		/* index of parent process */
   int mp_tracer;		/* index of tracer process, or NO_TRACER */
-
+    int shared_value;   /*Project 1 addition to process table */
+    
   /* Child user and system times. Accounting done on child exit. */
   clock_t mp_child_utime;	/* cumulative user time of children */
   clock_t mp_child_stime;	/* cumulative sys time of children */
@@ -94,3 +96,7 @@ EXTERN struct mproc {
 #define TAINTED		0x40000 /* process is 'tainted' */
 
 #define MP_MAGIC	0xC0FFEE0
+
+//Program 1: do_svedit syscall for success and failure of the syscall
+#define SUCCESS 0
+#define FAILURE 1
diff --git a/servers/pm/proto.h b/servers/pm/proto.h
index 00646d3..3ee6d7b 100644
--- a/servers/pm/proto.h
+++ b/servers/pm/proto.h
@@ -56,6 +56,7 @@ int do_getepinfo(void);
 int do_getepinfo_o(void);
 int do_svrctl(void);
 int do_getsetpriority(void);
+int do_svedit(void); //PROJ1: syscall editing shared_value
 
 /* schedule.c */
 void sched_init(void);
diff --git a/servers/pm/table.c b/servers/pm/table.c
index 5051cec..dd2aaec 100644
--- a/servers/pm/table.c
+++ b/servers/pm/table.c
@@ -80,7 +80,7 @@ int (*call_vec[])(void) = {
 	do_set, 	/* 66 = setgroups */
 	do_getmcontext,	/* 67 = getmcontext */
 	do_setmcontext,	/* 68 = setmcontext */
-	no_sys,		/* 69 = unused	*/
+	do_svedit,		/* 69 = svedit PROJ1 */
 	no_sys,		/* 70 = unused	*/
 	do_sigaction,	/* 71 = sigaction   */
 	do_sigsuspend,	/* 72 = sigsuspend  */
diff --git a/servers/procfs/pid.c b/servers/procfs/pid.c
index f37e049..08c7d94 100644
--- a/servers/procfs/pid.c
+++ b/servers/procfs/pid.c
@@ -168,6 +168,11 @@ static void pid_psinfo(int i)
 	/* add total memory for tasks at the end */
 	if(task) buf_printf(" %lu", vui.vui_total);
 
+	/*print out Madeleine's newpid */
+	buf_printf(" %d",
+		mproc[pi].newpid /* Madeleine's pid*/
+	);
+
 	/* Newline at the end of the file. */
 	buf_printf("\n");
 }
